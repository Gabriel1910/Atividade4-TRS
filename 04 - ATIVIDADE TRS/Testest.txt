// public class UsuarioSimulation extends Simulation {
//     // Configuração do protocolo HTTP
//     HttpProtocolBuilder httpProtocol = http
//             .baseUrl("http://localhost:8080")
//             .acceptHeader("application/json");
//   
//     ChainBuilder listarTodos = exec(
//             http("Listar Todos os Usuários") 
//                     .get("/usuarios")
//                     .check(status().is(200))
//     ).pause(1);
//    
//     ChainBuilder buscarPorId = exec(
//             http("Buscar Usuário por ID") 
//                     .get("/usuarios/1")
//                     .check(status().is(200)) 
//     ).pause(1);
//     
//     ChainBuilder salvar = exec(
//             http("Salvar Usuário") 
//                     .post("/usuarios") 
//                     .body(StringBody("{\"nome\": \"Teste\", \"email\": \"teste@exemplo.com\"}")).asJson()  em JSON
//                     .check(status().is(201)) 
//     ).pause(1);
//    
//     ChainBuilder atualizar = exec(
//             http("Atualizar Usuário") 
//                     .put("/usuarios/1") 
//                     .body(StringBody("{\"nome\": \"Teste Atualizado\", \"email\": \"teste.atualizado@exemplo.com\"}")).asJson() 
//                     .check(status().is(200)) 
//     ).pause(1); 
//  
//     ChainBuilder deletar = exec(
//             http("Deletar Usuário") 
//                     .delete("/usuarios/1")
//                     .check(status().is(204))
//     ).pause(1);s
//  
//     ScenarioBuilder usuarios = scenario("Usuarios")
//             .exec(listarTodos, buscarPorId, salvar, atualizar, deletar);
//     // Definição da cadeia de ações para enviar grandes volumes de dados
//     ChainBuilder enviarDadosGrandes = exec(
//             http("Enviar Dados Grandes")
//                     .post("/dados")
//                     .body(StringBody("{\"data\": \"" + "x".repeat(10000) + "\"}")).asJson() // Enviar um payload grande
//                     .check(status().is(200))
//     ).pause(1);
//    
//     ScenarioBuilder volumeTest = scenario("Volume Test")
//             .exec(enviarDadosGrandes);
//     {
//       
//         setUp(
//                 usuarios.injectOpen(rampUsers(10).during(10)),
//                 usuarios.injectOpen(
//                         incrementUsersPerSec(5) 
//                                 .times(5)
//                                 .eachLevelLasting(10)
//                                 .startingFrom(10)
//                 ),
//                 // Teste de Pico
//                 usuarios.injectOpen(
//                         atOnceUsers(100)
//                 ),
//                 // Teste de Capacidade
//                 usuarios.injectOpen(
//                         rampUsers(1000).during(60)
//                 ),
//                 // Teste de Endurance
//                 usuarios.injectOpen(
//                         constantUsersPerSec(10).during(3600)
//                 ),
//                 // Teste de Volume
//                 volumeTest.injectOpen(
//                         constantUsersPerSec(5).during(600) 
//                 ),
//                 // Teste de Confiabilidade
//                 usuarios.injectOpen(
//                         constantUsersPerSec(20).during(1800)s
//                 )
//         ).protocols(httpProtocol); 
//     }
// }
// Teste de Carga:
// Objetivo: Avaliar o desempenho do sistema sob uma carga específica de usuários simultâneos.
// Configuração: Injetar 10 usuários ao longo de 10 segundos.
// Código:
// Teste de Estresse:
// Objetivo: Determinar o ponto de falha do sistema ao aumentar a carga.
// Configuração: Aumentar a carga em 5 usuários por segundo, 5 vezes, cada nível durando 10 segundos, começando com 10 usuários por segundo.
// Teste de Pico:
// Objetivo: Avaliar o comportamento do sistema sob uma carga de pico repentina.
// Configuração: Injetar 100 usuários de uma vez.
// Teste de Capacidade:
// Objetivo: Determinar a capacidade máxima do sistema.
// Configuração: Injetar 1000 usuários ao longo de 60 segundos.
// Teste de Endurance:
// Objetivo: Verificar a estabilidade do sistema ao longo de um período prolongado.
// Configuração: Manter uma carga constante de 10 usuários por segundo durante 1 hora.
// Teste de Volume:
// Objetivo: Avaliar o comportamento do sistema ao processar uma grande quantidade de dados.
// Configuração: Enviar grandes volumes de dados em cada requisição.
// Teste de Confiabilidade:
// Objetivo: Avaliar a confiabilidade do sistema sob condições normais de operação.
// Configuração: Simular a carga esperada em um ambiente de produção.
